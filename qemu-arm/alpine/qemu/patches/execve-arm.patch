diff -Nrup a/linux-user/syscall.c b/linux-user/syscall.c
--- a/linux-user/syscall.c	2018-12-11 17:44:34.000000000 +0000
+++ b/linux-user/syscall.c	2018-12-11 17:44:34.000000000 +0000
@@ -6886,6 +6886,94 @@ static int host_to_target_cpu_mask(const
     return 0;
 }
 
+#define BINPRM_BUF_SIZE 128
+
+/* qemu_execve() Must return target values and target errnos. */
+static abi_long qemu_execve(char *filename, char *argv[],
+                  char *envp[])
+{
+    char *i_arg = NULL, *i_name = NULL;
+    char **new_argp;
+    int argc, fd, ret, i, offset = 3;
+    char *cp;
+    char buf[BINPRM_BUF_SIZE];
+
+    for (argc = 0; argv[argc] != NULL; argc++);
+
+    fd = open(filename, O_RDONLY);
+    if (fd == -1)
+        return -ENOENT;
+
+    ret = read(fd, buf, BINPRM_BUF_SIZE);
+    if (ret == -1) {
+        close(fd);
+        return -ENOENT;
+    }
+
+    close(fd);
+
+    /* adapted from the kernel
+     * https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/fs/binfmt_script.c
+     */
+    if ((buf[0] == '#') && (buf[1] == '!')) {
+        /*
+         * This section does the #! interpretation.
+         * Sorta complicated, but hopefully it will work.  -TYT
+         */
+
+        buf[BINPRM_BUF_SIZE - 1] = '\0';
+        if ((cp = strchr(buf, '\n')) == NULL)
+            cp = buf+BINPRM_BUF_SIZE-1;
+        *cp = '\0';
+        while (cp > buf) {
+            cp--;
+            if ((*cp == ' ') || (*cp == '\t'))
+                *cp = '\0';
+            else
+                break;
+        }
+        for (cp = buf+2; (*cp == ' ') || (*cp == '\t'); cp++);
+        if (*cp == '\0')
+            return -ENOEXEC; /* No interpreter name found */
+        i_name = cp;
+        i_arg = NULL;
+        for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++)
+            /* nothing */ ;
+        while ((*cp == ' ') || (*cp == '\t'))
+            *cp++ = '\0';
+        if (*cp)
+            i_arg = cp;
+
+        if (i_arg)
+            offset = 5;
+        else
+            offset = 4;
+    }
+
+    new_argp = alloca((argc + offset + 1) * sizeof(void *));
+
+    // Copy the original arguments with offset
+    for (i = 0; i < argc; i++)
+        new_argp[i + offset] = argv[i];
+
+    new_argp[0] = strdup("/usr/bin/qemu-arm-static");
+    new_argp[1] = strdup("-0");
+    new_argp[offset] = filename;
+    new_argp[argc + offset] = NULL;
+
+    if (i_name) {
+        new_argp[2] = i_name;
+        new_argp[3] = i_name;
+
+        if (i_arg)
+            new_argp[4] = i_arg;
+    } else {
+        new_argp[2] = argv[0];
+    }
+
+    return get_errno(safe_execve("/usr/bin/qemu-arm-static", new_argp, envp));
+}
+
 /* This is an internal helper for do_syscall so that it is easier
  * to have a single return point, so that actions, such as logging
  * of syscall results, can be performed.
@@ -7174,7 +7262,7 @@ static abi_long do_syscall1(void *cpu_en
              * before the execve completes and makes it the other
              * program's problem.
              */
-            ret = get_errno(safe_execve(p, argp, envp));
+            ret = get_errno(qemu_execve(p, argp, envp));
             unlock_user(p, arg1, 0);
 
             goto execve_end;
